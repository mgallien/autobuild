require 'autobuild/configurable'
require 'autobuild/packages/cmake'
require 'autobuild/import/git'
require 'yaml'

module Autobuild
    def self.bipgenom(options, &block)
        BIPGenoM.new(options, &block)
    end

    class BIPGenoM < Configurable
        class << self
            def builddir; @builddir || Configurable.builddir end
            def builddir=(new)
                raise ConfigException, "absolute builddirs are not supported" if (Pathname.new(new).absolute?)
                raise ConfigException, "builddir must be non-nil and non-empty" if (new.nil? || new.empty?)
                @builddir = new
            end
        end

        def initialize(options)
            super
        end

        def doc_dir
            @cmakeBuilder.doc_dir if @cmakeBuilder
        end

        # Declare that the given target can be used to generate documentation
        def with_doc(target = 'doc')
            @cmakeBuilder.with_doc if @cmakeBuilder
        end

        def configurestamp
            @cmakeBuilder.configurestamp if @cmakeBuilder
        end

        def buildstamp
            @cmakeBuilder.buildstamp if @cmakeBuilder
        end

        def import
            super
        end

        def prepare
            if File.exists? "#{srcdir}/#{name}.yaml"
                packageInfo = open("#{srcdir}/#{name}.yaml", "r") { |f| YAML.load(f) }
                genomModuleImporter = Git.new(packageInfo["sourceUrl"], nil, {:branch => packageInfo["branch"]})
                @cmakeBuilder = CMake.new({:"#{name}_genom_checkout" => []})
                @cmakeBuilder.srcdir = "#{srcdir}/#{name}"
                @cmakeBuilder.prefix = prefix

                if File.directory? "#{srcdir}/#{name}"
                    FileUtils.rm_rf "#{srcdir}/#{name}"
                end

                genomModuleImporter.import(@cmakeBuilder)

                Dir.chdir(@cmakeBuilder.srcdir) do
                    progress "generating the BIP model for %s"
                    command = ["genom-to-bip.rb", name, packageInfo["bipModelGenerationOptions"]]
                    Subprocess.run(self, 'generating BIP model', *command)
                end

                if File.directory? "#{srcdir}/patches"
                    progress "applying modifications to the original GenoM sources or to the autogenerated BIP model for %s"
                    allPatches = []

                    Dir.new("#{srcdir}/patches").each do |dirEntry|
                        if dirEntry =~ /.*\.patch/
                            allPatches << dirEntry
                        end
                    end

                    allPatches.sort!

                    Dir.chdir(@cmakeBuilder.srcdir) do
                        allPatches.each do |patchName|
                            command = ["patch", "-p1", "--input=../patches/#{patchName}"]
                            Subprocess.run(self, "applying patch #{patchName}", *command)
                        end
                    end
                end

                super
            else
                raise Autobuild::Exception.new(name, :prepare)
            end
        end

        # Configure the builddir directory before starting make
        def configure
            super do
                @cmakeBuilder.configure if @cmakeBuilder
            end
        end

        # Do the build in builddir
        def build
            @cmakeBuilder.build if @cmakeBuilder
        end

        # Install the result in prefix
        def install
            @cmakeBuilder.install if @cmakeBuilder
            super
        end
    end
end
